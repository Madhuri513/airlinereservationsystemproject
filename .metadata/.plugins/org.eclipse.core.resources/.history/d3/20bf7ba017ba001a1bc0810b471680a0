package com.jfsfeb.airlinereservationsystem.controller;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import com.jfsfeb.airlinereservationsystem.dto.AdminDetails;
import com.jfsfeb.airlinereservationsystem.dto.FlightDetails;
import com.jfsfeb.airlinereservationsystem.dto.TicketsInfo;
import com.jfsfeb.airlinereservationsystem.dto.UserDetails;
import com.jfsfeb.airlinereservationsystem.factory.UserFactory;
import com.jfsfeb.airlinereservationsystem.services.AdminServices;
import com.jfsfeb.airlinereservationsystem.services.AdminServicesImple;
import com.jfsfeb.airlinereservationsystem.validations.AirlineValidations;
import com.jfsfeb.airlineresevationsystem.exceptions.AirlineSystemException;

import lombok.extern.log4j.Log4j;

@Log4j
public class AdminController {

	public static final Scanner scan = new Scanner(System.in);

	public static final UserDetails userInfo = new UserDetails();
	public static final AdminDetails adminInfo = new AdminDetails();
	public static final FlightDetails flightInfo = new FlightDetails();
	public static final AdminServices adminServices = new AdminServicesImple();
	public static final AirlineValidations validation = UserFactory.getValidationInstance();

	public static void adminController() {

		String email = null;
		String password = null;
		int flightId = 0;
		String flightName = null;
		LocalTime arrivalTime = null;
		LocalTime departureTime = null;
		LocalDate arrivalDate = null;
		LocalDate departureDate = null;
		boolean flag = false;

		int select = 0;

		do {
			try {
				log.info("1.Admin login");
				log.info("2.Exit");

				select = scan.nextInt();

				switch (select) {

				case 1:

					log.info("Enter yor emailid");
					email = scan.next();
//					adminInfo.setEmailId(email);

					log.info("Enter your password");
					password = scan.next();
//					adminInfo.setPassword(password);

					try {
						boolean login = adminServices.adminLogin(email, password);

						if (login) {

							log.info("Logged in successfully!!!!!");

							int choice = 0;

							do {

								log.info("Which operations you want to perform?????");
								log.info("***************************");
								log.info("1.View all flights");
								log.info("2.Add new Flights");
								log.info("3.Search flight by id");
								log.info("4.Delete Flights");
								log.info("5.View All User details");
								log.info("6.View Ticket Bookings");
								log.info("7.Logout");

								choice = scan.nextInt();

								switch (choice) {

								case 1:

									log.info("Flights details are:");

									List<FlightDetails> records = adminServices.viewFlightDetails();

									for (FlightDetails details : records) {
										log.info(details);
									}

									break;

								case 2:

									log.info("Add new Flight");

									log.info("Enter Flight Id : ");
									flightId = scan.nextInt();
									flightInfo.setFlightId(flightId);

									log.info("Enter Flight name : ");
									flightName = scan.next();
									flightInfo.setFlightName(flightName);

									log.info("Enter Arrival time : ");

									do {
										try {
											flag = false;
											arrivalTime = LocalTime.parse(scan.next());
											break;
										} catch (DateTimeParseException e) {
											log.error(
													"Time should be in HH:MM:SS format only! hours from 0 to 23, minutes from 0 to 59 and seconds from 0 to 59!!!");
										}
									} while (!flag);
									flightInfo.setArrivalTime(arrivalTime);

									log.info("Enter Arrival date : ");

									do {
										try {
											flag = false;
											arrivalDate = LocalDate.parse(scan.next());
											break;
										} catch (DateTimeParseException e) {
											log.error(
													"Date should be in YYYY-MM-DD format only! month from 1 to 12 and date from 1 to 31 only!!!");
										}
									} while (!flag);
									flightInfo.setArrivalDate(arrivalDate);

									log.info("Enter Departure time : ");
									do {
										try {
											flag = false;
											departureTime = LocalTime.parse(scan.next());
											break;
										} catch (DateTimeParseException e) {
											log.error(
													"Time should be in HH:MM:SS format only! hours from 0 to 23, minutes from 0 to 59 and seconds from 0 to 59!!!");
										}
									} while (!flag);

									flightInfo.setDepartureTime(departureTime);

									log.info("Enter Departure Date : ");
									do {
										try {
											flag = false;
											departureDate = LocalDate.parse(scan.next());
											break;
										} catch (DateTimeParseException e) {
											log.error(
													"Date should be in YYYY-MM-DD format only! month from 1 to 12 and date from 1 to 31 only!!!");
										}
									} while (!flag);

									flightInfo.setDepartureDate(departureDate);

									log.info("Enter Source : ");
									String source = scan.next();
									flightInfo.setSource(source);

									log.info("Enter Destination : ");
									String destination = scan.next();
									flightInfo.setDestination(destination);

									log.info("Enter ticket price : ");
									double price = scan.nextDouble();
									flightInfo.setPrice(price);

									try {
										boolean adding = adminServices.addFlights(flightInfo);

										if (adding) {
											log.info("Flight added successfully ..........");
										}
									} catch (AirlineSystemException e) {
										log.error(e.getMessage());
									}

									break;

								case 3:

									log.info("Search flight by id");


									try {

										flightId = scan.nextInt();
										List<FlightDetails> search = adminServices.searchFlight(flightId);

										if (search != null) {
											for (FlightDetails details : search) {
												log.info(details);
											}
										}

									}catch(InputMismatchException e) {
										log.error("Id should be in numbers only");
										break;
									}catch (AirlineSystemException e) {
										log.error(e.getMessage());
										break;
									}

									break;

								case 4:

									log.info("Enter id of the fligth to delete : ");

									flightId = scan.nextInt();
									try {
										boolean deleted = adminServices.deleteFlights(flightId);
										if (deleted) {
											log.info("Deleted flight successfully");
										}
									} catch (AirlineSystemException e) {
										log.error(e.getMessage());
									}

									break;

								case 5:

									log.info("User details are:");
									List<UserDetails> users = adminServices.viewAllUserDetails();
									for (UserDetails details : users) {
										log.info(details);
									}
									break;

								case 6:

									log.info("Ticket Booking details are:");
									List<TicketsInfo> bookings = adminServices.viewTicketsInfos();
									for (TicketsInfo details : bookings) {
										log.info(details);
									}
									break;

								case 7:

									log.info("Logged out successfully!!!!!!!!!!!");
									LoginController.loginController();
									break;

								default:
									log.error("Invalid choice , please enter values 1 to 7 only");
									break;

								}
							} while (choice != 7);
						}
					} catch(InputMismatchException e) {
						log.error("Invalid Choice, Choice Contain Only Digits");
						break;
					} catch (AirlineSystemException e) {
						log.info(e.getMessage());
						break;
					}

					break;

				case 2:

					log.info("Exit!!!");
					break;

				default:

					log.info("Invalid choice, please enter values from 1 or 2 only");
					break;

				}
			} catch (InputMismatchException e) {
				log.error("Invalid Choice, It Should Contain Only Digits");
				break;
			} catch (AirlineSystemException e) {
				log.error(e.getMessage());
				break;
			}

		} while (select != 2);

	

		scan.close();

	}

}
