package com.jfsfeb.airlinereservationsystemwithjdbc.dao;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Time;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import com.jfsfeb.airlinereservationsystemwithjdbc.dto.FlightDetails;
import com.jfsfeb.airlinereservationsystemwithjdbc.dto.TicketsInfo;
import com.jfsfeb.airlinereservationsystemwithjdbc.dto.UserDetails;
import com.jfsfeb.airlinereservationsystemwithjdbc.exceptions.AirlineSystemException;
import com.jfsfeb.airlinereservationsystemwithjdbc.utility.Utility;

public class AdminDAOImple implements AdminDAO {

	Connection connection = null;
	PreparedStatement myStmt = null;
	ResultSet rs = null;
	UserDetails userBean = new UserDetails();
	TicketsInfo ticketBean = new TicketsInfo();
	FlightDetails flightBean = new FlightDetails();
	Properties properties = new Properties();
	Utility connector = new Utility();
	int result = 0;

	@Override
	public boolean adminLogin(String emailId, String password) {
		try {
			connection = connector.getConnection();
//			String query = "select * from userinfo where email=? and password=?";
			myStmt = connection.prepareStatement(connector.getQuery("query"));
			myStmt.setString(1, emailId);
			myStmt.setString(2, password);
			rs = myStmt.executeQuery();

			if (rs.next()) {
				userBean.setMailId(rs.getString("email"));
				userBean.setPassword(rs.getString("password"));
				return true;
			}
		} catch (Exception e) {
			System.out.println(e);
		}

		throw new AirlineSystemException("Enter correct mailid and password");
	}

	@Override
	public boolean addFlights(FlightDetails flights) {
		try {
			connection = connector.getConnection();
//			String query = "insert into flightinfo values(?,?,?,?,?,?,?,?,?,?)";
			myStmt = connection.prepareStatement(connector.getQuery("insertquery"));
			int id = flights.getFlightId();
			String name = flights.getFlightName();
			Date date = flights.getArrivalDate();
			Time time = flights.getArrivalTime();
			Date date1 = flights.getDepartureDate();
			Time time1 = flights.getDepartureTime();
			String source = flights.getSource();
			String destination = flights.getDestination();
			int seats = flights.getSeats();
			double price = flights.getPrice();
			myStmt.setInt(1, id);
			myStmt.setString(2, name);
			myStmt.setDate(3, date);
			myStmt.setTime(4, time);
			myStmt.setDate(5, date1);
			myStmt.setTime(6, time1);
			myStmt.setString(7, source);
			myStmt.setString(8, destination);
			myStmt.setInt(9, seats);
			myStmt.setDouble(10, price);

			result = myStmt.executeUpdate();

			if (id != 0 && name != null) {
				return true;
			} else {
				return false;
			}

		} catch (Exception e) {
			e.getMessage();
		} 
		throw new AirlineSystemException("Invalid details");
	}

	@Override
	public boolean deleteFlights(int id) {
		try {
			connection = connector.getConnection();
//			String query = "delete from fligthinfo where fligthid=?";
			myStmt = connection.prepareStatement(connector.getQuery("deletequery"));
			myStmt.setInt(1, id);
			result = myStmt.executeUpdate();
			if (result > 0) {
				return true;
			}
		} catch (Exception e) {
			System.out.println(e);
		} 
		throw new AirlineSystemException("Flight id is not present");
	}

	@Override
	public List<FlightDetails> searchFlight(int id) {
		List<FlightDetails> searchFlight = new ArrayList<FlightDetails>();
		try {
			FileInputStream fis = new FileInputStream("propertiesfordb.properties");
			properties.load(fis);

			Class.forName(properties.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(properties.getProperty("dburl"), properties.getProperty("user"),
					properties.getProperty("password"));

			String query = "select * from  fligthinfo where fligthid=?";
			myStmt = connection.prepareStatement(query);
			myStmt.setInt(1, id);
			rs = myStmt.executeQuery();
			if (rs.next()) {
				FlightDetails flightBean1 = new FlightDetails();
				flightBean1.setFlightId(rs.getInt("flightid"));
				flightBean1.setFlightName(rs.getString("flightname"));
				flightBean1.setArrivalTime(rs.getTime("arrivaltime"));
				flightBean1.setArrivalDate(rs.getDate("arrivaldate"));
				flightBean1.setDepartureDate(rs.getDate("departuredate"));
				flightBean1.setDepartureTime(rs.getTime("departuretime"));
				flightBean1.setSource(rs.getString("source"));
				flightBean1.setDestination(rs.getString("destination"));
				flightBean1.setSeats(rs.getInt("seats"));
				flightBean1.setPrice(rs.getDouble("price"));
				searchFlight.add(flightBean1);
			}
			return searchFlight;
		} catch (Exception e) {
			e.getMessage();
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (myStmt != null) {
					myStmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				System.out.println(e);
			}

		}
		throw new AirlineSystemException("Fligth details not found");
	}

	@Override
	public List<FlightDetails> viewFlightDetails() {
		List<FlightDetails> list = new ArrayList<FlightDetails>();
		try {
			FileInputStream fis = new FileInputStream("propertiesfordb.properties");
			properties.load(fis);

			Class.forName(properties.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(properties.getProperty("dburl"), properties.getProperty("user"),
					properties.getProperty("password"));
			
			String query = "select * from  flightinfo";
			myStmt = connection.prepareStatement(query);
			rs = myStmt.executeQuery();
			while (rs.next()) {
				FlightDetails flightBean1 = new FlightDetails();
				flightBean1.setFlightId(rs.getInt("flightid"));
				flightBean1.setFlightName(rs.getString("flightname"));
				flightBean1.setArrivalTime(rs.getTime("arrivaltime"));
				flightBean1.setArrivalDate(rs.getDate("arrivaldate"));
				flightBean1.setDepartureDate(rs.getDate("departuredate"));
				flightBean1.setDepartureTime(rs.getTime("departuretime"));
				flightBean1.setSource(rs.getString("source"));
				flightBean1.setDestination(rs.getString("destination"));
				flightBean1.setSeats(rs.getInt("seats"));
				flightBean1.setPrice(rs.getDouble("price"));
				list.add(flightBean1);
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		return list;
	}

	@Override
	public List<UserDetails> viewAllUserDetails() {
		List<UserDetails> allUsers = new ArrayList<UserDetails>();
		try {
			FileInputStream fis = new FileInputStream("propertiesfordb.properties");
			properties.load(fis);

			Class.forName(properties.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(properties.getProperty("dburl"), properties.getProperty("user"),
					properties.getProperty("password"));
			
			String query = "select * from  userinfo";
			myStmt = connection.prepareStatement(query);
			rs = myStmt.executeQuery();
			while (rs.next()) {
				UserDetails userBean1 = new UserDetails();
				userBean1.setUserId(rs.getInt("id"));
				userBean1.setName(rs.getString("name"));
				userBean1.setMailId(rs.getString("email"));
				userBean1.setPassword(rs.getString("password"));
				userBean1.setPhoneNumber(rs.getInt("phonenumber"));
				allUsers.add(userBean1);
			}
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (myStmt != null) {
					myStmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				System.out.println(e);
			}

		}
		return allUsers;
	}

	@Override
	public List<TicketsInfo> viewTicketsInfos() {
		List<TicketsInfo> bookings = new ArrayList<TicketsInfo>();
		try {
			FileInputStream fis = new FileInputStream("propertiesfordb.properties");
			properties.load(fis);

			Class.forName(properties.getProperty("driver")).newInstance();
			connection = DriverManager.getConnection(properties.getProperty("dburl"), properties.getProperty("user"),
					properties.getProperty("password"));
			
			String query = "select * from  ticketsinfo";
			myStmt = connection.prepareStatement(query);
			rs = myStmt.executeQuery();
			while (rs.next()) {
				ticketBean.setTicketId(rs.getInt("ticketId"));
				ticketBean.setNoOfSeatsBooked(rs.getInt("seats"));
				bookings.add(ticketBean);
			}
		} catch (Exception e) {
			System.out.println(e);
		} finally {
			try {
				if (connection != null) {
					connection.close();
				}
				if (myStmt != null) {
					myStmt.close();
				}
				if (rs != null) {
					rs.close();
				}
			} catch (Exception e) {
				System.out.println(e);
			}

		}
		return bookings;
	}
}
