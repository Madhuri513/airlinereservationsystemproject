package com.jfsfeb.airlinereservationsystemwithhibernate.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.persistence.TypedQuery;

import com.jfsfeb.airlinereservationsystemwithhibernate.dto.FlightDetails;
import com.jfsfeb.airlinereservationsystemwithhibernate.dto.TicketsInfo;
import com.jfsfeb.airlinereservationsystemwithhibernate.dto.UserDetails;
import com.jfsfeb.airlinereservationsystemwithhibernate.exception.AirlineSystemException;

public class UserDAOImple implements UserDAO {

	EntityManagerFactory entityManagerFactory = null;
	EntityManager entityManager = null;
	EntityTransaction transaction = null;

	@Override
	public boolean userRegistration(UserDetails user) {
		try(Connection connection = connector.getConnection();
				PreparedStatement myStmt = connection.prepareStatement(connector.getQuery("register"));) {
			
			myStmt.setInt(1, user.getUserId());
			myStmt.setString(2, user.getName());
			myStmt.setString(3, user.getMailId());
			myStmt.setString(4, user.getPassword());
			myStmt.setLong(5, user.getPhoneNumber());
			myStmt.setString(6, user.getRole());
			result = myStmt.executeUpdate();
			
			if (result > 0) {
				return true;
			} else {
				return false;
			}
			
		} catch (Exception e) {
			throw new AirlineSystemException("Invalid details");
		}
	}

	@Override
	public boolean userLogin(String emailId, String password) {
		entityManagerFactory = Persistence.createEntityManagerFactory("TestPersistence2");
		entityManager = entityManagerFactory.createEntityManager();

		String jpql = "select e.mailId,e.password from UserDetails e where e.mailId = :mail and e.password = :password";
		TypedQuery<UserDetails> query = entityManager.createQuery(jpql, UserDetails.class);
		query.setParameter("mail", emailId);
		query.setParameter("password", password);
		UserDetails record = query.getSingleResult();

		if (record != null) {
			return true;
		}
		entityManager.close();
		entityManagerFactory.close();
		throw new AirlineSystemException("Enter correct mailid and password");
	}

	@Override
	public List<FlightDetails> getFlightDetails() {
		List<FlightDetails> flights = new ArrayList<FlightDetails>();
		try(Connection connection = connector.getConnection();
				PreparedStatement myStmt = connection.prepareStatement(connector.getQuery("getquery"));) {
		
//			String query = "select * from  flightinfo";
			
			rs = myStmt.executeQuery();
			while (rs.next()) {
				FlightDetails flightBean1 = new FlightDetails();
				flightBean1.setFlightId(rs.getInt("flightid"));
				flightBean1.setFlightName(rs.getString("flightname"));
				flightBean1.setArrivalTime(rs.getTime("arrivaltime").toLocalTime());
				flightBean1.setArrivalDate(rs.getDate("arrivaldate").toLocalDate());
				flightBean1.setDepartureDate(rs.getDate("departuredate").toLocalDate());
				flightBean1.setDepartureTime(rs.getTime("departuretime").toLocalTime());
				flightBean1.setSource(rs.getString("source"));
				flightBean1.setDestination(rs.getString("destination"));
				flightBean1.setSeats(rs.getInt("seats"));
				flightBean1.setPrice(rs.getDouble("price"));
				flights.add(flightBean1);
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		return flights;
	}

	@Override
	public List<FlightDetails> searchFlightByName(String name) {
		List<FlightDetails> flights1 = new ArrayList<FlightDetails>();
		try(Connection connection = connector.getConnection();
				PreparedStatement myStmt = connection.prepareStatement(connector.getQuery("searchbyname"));) {
			

//			String query = "select * from  fligthinfo where flightname=?";
			
			myStmt.setString(1, name);
			rs = myStmt.executeQuery();
			if (rs.next()) {
				FlightDetails flightBean1 = new FlightDetails();
				flightBean1.setFlightId(rs.getInt("flightid"));
				flightBean1.setFlightName(rs.getString("flightname"));
				flightBean1.setArrivalTime(rs.getTime("arrivaltime").toLocalTime());
				flightBean1.setArrivalDate(rs.getDate("arrivaldate").toLocalDate());
				flightBean1.setDepartureDate(rs.getDate("departuredate").toLocalDate());
				flightBean1.setDepartureTime(rs.getTime("departuretime").toLocalTime());
				flightBean1.setSource(rs.getString("source"));
				flightBean1.setDestination(rs.getString("destination"));
				flightBean1.setSeats(rs.getInt("seats"));
				flightBean1.setPrice(rs.getDouble("price"));
				flights1.add(flightBean1);
			}
			return flights1;
		} catch (Exception e) {
			e.getMessage();
		}
		throw new AirlineSystemException("Fligth details not found");
	}

	@Override
	public TicketsInfo bookFligthTicket(int bookingId, UserDetails userInfo, FlightDetails flightInfo, int seats) {

		try(Connection connection = connector.getConnection();
				PreparedStatement myStmt = connection.prepareStatement(connector.getQuery("ticketbooking"));) {
			myStmt.setInt(1, bookingId);
			myStmt.setInt(2, userInfo.getUserId());
			myStmt.setInt(3, flightInfo.getFlightId());
			myStmt.setInt(4, seats);
			result = myStmt.executeUpdate();
			
		} catch (Exception e) {
			e.getMessage();
		}
		throw new AirlineSystemException("Invalid request");

	}

	@Override
	public boolean cancelFlightTicket(int bookingId) {

		try(Connection connection = connector.getConnection();
				PreparedStatement myStmt = connection.prepareStatement(connector.getQuery("cancelticket"));) {
			myStmt.setInt(1, bookingId);
			result = myStmt.executeUpdate();
			if (result > 0) {
				return true;
			}
		} catch (Exception e) {
			e.getMessage();
		}
		throw new AirlineSystemException("Enter correct booking id");
	}

	@Override
	public List<TicketsInfo> getTicketDetails(int userId) {
		List<TicketsInfo> tickets = new ArrayList<TicketsInfo>();
		try(Connection connection = connector.getConnection();
				PreparedStatement myStmt = connection.prepareStatement(connector.getQuery("ticketdetails"));) {
			myStmt.setInt(1, userId);
			rs = myStmt.executeQuery();
			while (rs.next()) {
				TicketsInfo ticketBean1 = new TicketsInfo();
				ticketBean1.setTicketId(rs.getInt("ticketid"));
				ticketBean1.setNoOfSeatsBooked(rs.getInt("seats"));
				tickets.add(ticketBean1);
			}
			return tickets;
		} catch (Exception e) {
			e.getMessage();
		}
		throw new AirlineSystemException("No tickets with this userid...........");
	}

	@Override
	public List<FlightDetails> searchFlightBySourceAndDestination(String source, String destination) {
		List<FlightDetails> flights2 = new ArrayList<FlightDetails>();
		try(Connection connection = connector.getConnection();
				PreparedStatement myStmt = connection.prepareStatement(connector.getQuery("search"));) {
			
			myStmt.setString(1, source);
			myStmt.setString(2, destination);
			rs = myStmt.executeQuery();
			if (rs.next()) {
				FlightDetails flightBean1 = new FlightDetails();
				flightBean1.setFlightId(rs.getInt("flightid"));
				flightBean1.setFlightName(rs.getString("flightname"));
				flightBean1.setArrivalTime(rs.getTime("arrivaltime").toLocalTime());
				flightBean1.setArrivalDate(rs.getDate("arrivaldate").toLocalDate());
				flightBean1.setDepartureDate(rs.getDate("departuredate").toLocalDate());
				flightBean1.setDepartureTime(rs.getTime("departuretime").toLocalTime());
				flightBean1.setSource(rs.getString("source"));
				flightBean1.setDestination(rs.getString("destination"));
				flightBean1.setSeats(rs.getInt("seats"));
				flightBean1.setPrice(rs.getDouble("price"));
				flights2.add(flightBean1);
			}
			return flights2;
		} catch (Exception e) {
			e.getMessage();
		} 
		throw new AirlineSystemException("No flight found with these details");
	}

}
